{"version":3,"sources":["assets/images/logo.png","Api.js","Home.jsx","NewSeries.jsx","Series.jsx","EditSeries.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","api","apis","loadGenres","axios","get","loadSeries","saveSeries","newSeries","post","loadSeriesByGenre","genre","deleteSeries","id","delete","loadSeriesById","updateSeries","series","put","Home","props","state","genres","isLoading","this","setState","then","res","console","log","data","key","to","name","className","src","logo","alt","map","renderGenreLink","Component","statuses","NewSeries","redirect","bind","e","preventDefault","refs","value","status","comments","target","elements","JSON","stringify","onSubmit","ref","type","Object","keys","Series","renderSeries","match","params","componentDidMount","onClick","length","EditSeries","About","App","role","href","height","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5748345.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b352c65f.png\";","import axios from 'axios'\n\n/*\nconst api = axios.create({\n    baseUrl: 'http://localhost:8080/'\n})\n/** */\n//const api = 'http://localhost:8080'\nconst api = `http://localhost/tutoriais/minhas_series/backend/index.php`\nconst apis = {\n    loadGenres:() => axios.get(`${api}/genres`),\n    loadSeries:() => axios.get(`${api}/series`),\n    saveSeries:(newSeries) => axios.post(`${api}/series/post`, newSeries),\n    //loadSeriesByGenre: (genre) => axios.get(`${api}/series?genre=${genre}`),\n    loadSeriesByGenre: (genre) => axios.get(`${api}/series/genre/${genre}`),\n    \n    deleteSeries: (id) => axios.delete(`${api}/series/${id}`),\n    loadSeriesById: (id) => axios.get(`${api}/series/${id}`),\n    updateSeries: (series) =>  axios.put(`${api}/series/${series.id}`, series)\n\n\n}\n\n//console.log(apis)\nexport default apis","import React, {Component} from 'react'\nimport { Link } from 'react-router-dom'\n\nimport logo from './assets/images/logo.png';\nimport api from './Api'\n\nclass Home extends Component{\n    constructor(props){\n        super(props)\n  \n        this.state = {\n          genres: [],\n          isLoading: false\n        }\n    }\n\n    componentDidMount(){\n        this.setState({isLoading:true})\n        api.loadGenres()\n            .then((res)=>{\n            console.log(res)\n            this.setState({\n                \n                isLoading: false,\n                genres: res.data\n            })\n        })\n    }\n    renderGenreLink(genre){\n        return(\n            <span key={genre.id}>&nbsp;<Link  to={`/series/${genre.name}`}>{genre.name}</Link>&nbsp;</span>\n        )\n    }\n    render(){\n        return (\n            <div>\n                <section id=\"intro\" className=\"intro-section\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-12\">\n                                <h1><img src={logo} alt = \"Logo do site\"/></h1>\n                                <p>Nunca mais esqueça uma série que você assistiu ou que alguém lhe indicou.</p>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n                <section>\n                    {\n                    this.state.isLoading &&\n                    <span>Aguarde, carregando ...</span>\n                    }\n                    {!this.state.isLoading &&\n                    <div>\n                        Ver séries do genêro: \n                        {this.state.genres.map(this.renderGenreLink)}\n                    </div>\n                    }\n                </section>\n            </div>\n        )\n    }\n}\n\nexport default Home","import React, {Component} from 'react'\nimport api from './Api'\nimport { Redirect }  from 'react-router-dom'\n\n\nconst statuses = {\n    'watched': 'Assistido',\n    'watching': 'Assistindo',\n    'toWatch':'Assitir'\n}\n\nclass NewSeries extends Component{\n    constructor(props){\n        super(props)\n  \n        this.state = {\n          genres: [],\n          isLoading: false,\n          redirect: false\n        }\n        this.saveSeries = this.saveSeries.bind(this)\n    }\n\n    componentDidMount(){\n        this.setState({isLoading:true})\n        api.loadGenres()\n            .then((res)=>{\n            this.setState({\n                isLoading: false,\n                genres: res.data\n            })\n        })\n    }\n\n    saveSeries(e){\n        //alert(this.refs.name.value)\n        e.preventDefault()\n        let newSeries = {\n            name: this.refs.name.value,\n            status: this.refs.status.value,\n            genre: this.refs.genre.value,\n            comments: this.refs.comments.value\n        }\n        console.log(e.target.elements)\n        newSeries = JSON.stringify(newSeries)\n        api.saveSeries(newSeries)\n            .then((res)=>{\n                console.log(res.data)\n                /*\n                this.setState({\n                    redirect: '/series/'+this.refs.genre.value\n                })\n                /** */\n            })\n        /** */\n        //return false\n    }\n\n    render(){\n        return(\n            <section className=\"intro-section\">\n                {this.state.redirect && \n                    <Redirect to = {this.state.redirect} />\n                }\n                <h1>Nova Série</h1>\n                <form onSubmit={this.saveSeries}>\n                    Nome: <input ref=\"name\" type=\"text\" className=\"form-control\"/><br/>\n\n                    Status:\n                    <select ref=\"status\"  className=\"form-control\">\n                        {Object.keys(statuses).map(\n                            key => \n                            <option key = {key} value = {key}>{statuses[key]}</option>\n                        )}\n                    </select> <br/>\n\n                    Genero:\n                    <select ref=\"genre\" className=\"form-control\">\n                        {this.state.genres.map(\n                            key => \n                            <option key = {key.id} value = {key.name}>{key.name}</option>\n                        )}\n                    </select><br/>\n\n                    Comentários : <textarea ref=\"comments\" className=\"form-control\"></textarea><br/>\n                    <button >Salvar</button>\n\n                </form>\n            </section>\n        )\n    }\n}\n\nexport default NewSeries","import React, {Component} from 'react'\nimport { Link } from 'react-router-dom'\n\nimport api from './Api'\n\nconst statuses = {\n    'watched': 'Assistido',\n    'watching': 'Assistido',\n    'toWatch': 'Assistir'\n}\n\nclass Series extends Component{\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            isLoading: false,\n            series: []\n        }\n        this.renderSeries = this.renderSeries.bind(this)\n    }\n\n    //this.renderSeries\n\n    componentDidMount(){\n        this.setState({isLoading: true })\n        api.loadSeriesByGenre(this.props.match.params.genre)\n            .then((res) => {\n                    this.setState({\n                        isLoading:false,\n                        series: res.data\n                    })\n                })\n    }\n    \n    deleteSeries(id){\n        //console.log(id)\n        api.deleteSeries(id)\n            .then((res) => this.componentDidMount())\n\n    }\n\n    renderSeries(series){\n        return(\n            <div key={series.id} className=\"item  col-xs-4 col-lg-4\">\n                <div className=\"thumbnail\">\n                    <img className=\"group list-group-image\" src=\"http://placehold.it/400x250/000/fff\" alt=\"\" />\n                    <div className=\"caption\">\n                        <h4 className=\"group inner list-group-item-heading\">\n                            {series.name}\n                        </h4>\n                        <div className=\"row\">\n                            <div className=\"col-xs-12 col-md-6\">\n                                <p className=\"lead\">\n                                    {series.genre} / {statuses[series.status]}\n                                </p>\n                            </div>\n                            <div className=\"col-xs-12 col-md-6\">\n                                <Link className=\"btn btn-success\" to={'/series/edit/'+series.id}>Editar</Link>\n                                <button onClick={() => this.deleteSeries(series.id)} className=\"btn btn-success\">Excluir</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    /** */\n    render(){\n        return(\n            <section id=\"intro\" className=\"intro-section\">\n                <h2>Series {this.props.match.params.genre}</h2>\n                <div id=\"series\" className=\"row list-group\">\n                    {\n                        this.state.isLoading && <p>Carregando, aguarde ...</p>\n                    }\n                    {\n                        !this.state.isLoading && this.state.series.length === 0 && \n                        <div className=\"alert alert-info\">Nenhuma Série Cadastrada.</div>\n                    }\n                    {!this.state.isLoading &&\n                        this.state.series.map(this.renderSeries)\n                    }\n                </div>\n            </section>\n               \n        )\n    }\n}\nexport default Series","import React, {Component} from 'react'\nimport api from './Api'\nimport { Redirect }  from 'react-router-dom'\n\n\nconst statuses = {\n    'watched': 'Assistido',\n    'watching': 'Assistindo',\n    'toWatch':'Assitir'\n}\n\nclass EditSeries extends Component{\n    constructor(props){\n        super(props)\n  \n        this.state = {\n          genres: [],\n          isLoading: false,\n          redirect: false,\n          series:{}\n        }\n        this.saveSeries = this.saveSeries.bind(this)\n    }\n\n    componentDidMount(){\n        this.setState({isLoading:true})\n\n        api.loadSeriesById(this.props.match.params.id)\n            .then((res) =>{\n                this.setState({ series: res.data})\n                this.refs.name.value = this.state.series.name\n                this.refs.genre.value = this.state.series.genre\n                this.refs.comments.value = this.state.series.comments\n            })\n        api.loadGenres()\n            .then((res)=>{\n            this.setState({\n                isLoading: false,\n                genres: res.data\n            })\n        })\n    }\n\n    saveSeries(e){\n        //alert(this.refs.name.value)\n        e.preventDefault()\n        const newSeries = {\n            id: this.props.match.params.id,\n            name: this.refs.name.value,\n            status: this.refs.status.value,\n            genre: this.refs.genre.value,\n            comments: this.refs.comments.value\n        }\n        //    console.log(newSeries)\n        \n        api.updateSeries(newSeries)\n            .then((res)=>{\n                this.setState({\n                    redirect: '/series/'+this.refs.genre.value\n                })\n            })\n        /** */\n        //return false\n    }\n\n    render(){\n        return(\n            <section className=\"intro-section\">\n                {this.state.redirect && \n                    <Redirect to = {this.state.redirect} />\n                }\n                <h1>Editar Série</h1>\n                <form onSubmit={this.saveSeries}>\n                    Nome: <input ref=\"name\" type=\"text\" className=\"form-control\"/><br/>\n\n                    Status:\n                    <select ref=\"status\"  className=\"form-control\">\n                        {Object.keys(statuses).map(\n                            key => \n                            <option key = {key} value = {key}>{statuses[key]}</option>\n                        )}\n                    </select> <br/>\n\n                    Genero:\n                    <select ref=\"genre\" className=\"form-control\">\n                        {this.state.genres.map(\n                            key => \n                            <option key = {key} value = {key}>{key}</option>\n                        )}\n                    </select><br/>\n\n                    Comentários : <textarea ref=\"comments\" className=\"form-control\"></textarea><br/>\n                    <button >Salvar</button>\n\n                </form>\n            </section>\n        )\n    }\n}\n\nexport default EditSeries","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom'\n\nimport logo from './assets/images/logo.png';\nimport Home from './Home'\nimport NewSeries from './NewSeries'\nimport Series from './Series'\nimport EditSeries from './EditSeries'\n\nconst About = () => (\n  <section className=\"intro-section\">\n    <h2>Sobre</h2>\n  </section>\n)\n\nclass App extends Component{\n  \n  render(){\n    return(\n      <Router>\n        <nav className=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n          <div className=\"container\">\n            <div className=\"navbar-header page-scroll\">\n              <a className=\"navbar-brand page-scroll\" href=\"#page-top\">\n                <img src={logo} height=\"30\" alt=\"Logo do site\"/>\n              </a>\n            </div>\n            <div className=\"collapse navbar-collapse navbar-ex1-collapse\">\n              <ul className=\"nav navbar-nav\">\n                <li>\n                  <Link to=\"/\">Menu item</Link>\n                </li>\n                <li>\n                  <Link to=\"/new\">Nova Série</Link>\n                </li>\n                <li>\n                  <Link to=\"/about\">Sobre</Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n        <Route exact={true} path=\"/\" component = {Home} />\n        <Route exact={true} path='/series/edit/:id' component={EditSeries} />\n        <Route exact={true} path='/series/:genre' component={Series} />\n        <Route path=\"/new\" component = {NewSeries} />\n        <Route path=\"/about\" component = {About} />\n      </Router>   \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}